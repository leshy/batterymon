// Generated by LiveScript 1.4.0
(function(){
  var h, fs, Backbone, abstractMan, colors, _, exec, batState, BatAlerter, state_charging, state_charged, state_discharging, state_unknown, notify, blink, numberState, state_75, state_50, state_30, state_20, state_10, state_5, batAlerter;
  h = require('helpers');
  fs = require('fs');
  Backbone = require('backbone4000');
  abstractMan = require('abstractman');
  colors = require('colors');
  _ = require('underscore');
  exec = require('child_process').exec;
  batState = abstractMan.State.extend4000({
    initialize: function(){
      var this$ = this;
      this.on('visit', function(){
        if (!this$.checkMove()) {
          return this$.trigger('settle');
        }
      });
      return this.on('settle', function(){
        console.log(colors.green("settled on " + this$.name));
        if (this$.settle) {
          return this$.settle();
        }
      });
    },
    check: function(batstate){
      return console.log(colors.red('no check'), this.name, batstate);
    },
    checkMove: function(batstate){
      var child;
      if (!batstate) {
        batstate = this.root.get('battery');
      }
      child = this.children.find(function(child){
        return child.check(batstate);
      });
      if (child) {
        this.changeState(child);
        return true;
      } else {}
    }
  });
  BatAlerter = abstractMan.StateMachine.extend4000({
    name: 'batAlerter',
    bat: 'BAT0',
    stateClass: batState,
    start: 'unknown',
    defaults: {
      battery: {
        state: 'unknown'
      }
    },
    initialize: function(){
      var this$ = this;
      this.full = Number(fs.readFileSync('/sys/class/power_supply/BAT0/energy_full'));
      this.perc = this.full / 100.0;
      setInterval(function(){
        return this$.update();
      }, 1000);
      return this.on('change:battery', function(model, battery){
        return this$.state.checkMove(battery);
      });
    },
    update: function(){
      var data;
      return this.set(data = {
        battery: {
          charge: Math.floor(Number(fs.readFileSync("/sys/class/power_supply/" + this.bat + "/energy_now")) / this.perc),
          state: h.trim(String(fs.readFileSync("/sys/class/power_supply/" + this.bat + "/status"))).toLowerCase()
        }
      });
    }
  });
  state_charging = BatAlerter.defineState({
    name: 'charging',
    child: 'unknown',
    check: function(state){
      return state.state === 'charging';
    },
    settle: function(){
      return notify("Battery is charging");
    }
  });
  state_charged = state_charging.defineChild({
    name: 'charged',
    children: ['discharging', 'unknown'],
    check: function(state){
      return state.state === 'unknown' && state.charge >= 75;
    }
  });
  state_discharging = state_charging.defineChild({
    name: 'discharging',
    children: ['charging', 'unknown'],
    check: function(state){
      return state.state === 'discharging';
    },
    settle: function(){
      return notify("Battery is discharging");
    }
  });
  state_unknown = BatAlerter.defineState({
    name: 'unknown',
    children: ['charging', 'charged', 'discharging'],
    check: function(state){
      return state.state === 'unknown';
    }
  });
  notify = function(text){
    return exec("notify-send '" + text + "'");
  };
  blink = function(text){
    return exec("bash -c '/usr/bin/redshift -o -O 1500; sleep 0.25; /usr/bin/redshift -o -O 3500'");
  };
  numberState = function(n, options){
    var state;
    return state = {
      name: String(n),
      children: ['charging', 'unknown'],
      check: function(state){
        return state.charge <= n;
      },
      settle: function(){
        if (options.notify) {
          if (options.notify.constructor === String) {
            notify(options.notify);
          } else {
            notify("Battery less then " + n + "%");
          }
        }
        if (options.blink) {
          return blink();
        }
      }
    };
  };
  state_75 = state_discharging.defineChild(numberState(75, {
    notify: true
  }));
  state_50 = state_75.defineChild(numberState(50, {
    notify: true,
    blink: true
  }));
  state_30 = state_50.defineChild(numberState(30, {
    notify: true,
    blink: true
  }));
  state_20 = state_30.defineChild(numberState(20, {
    notify: true,
    blink: true
  }));
  state_10 = state_20.defineChild(numberState(10, {
    notify: true,
    blink: true
  }));
  state_5 = state_10.defineChild(numberState(5, {
    notify: true,
    blink: true
  }));
  batAlerter = new BatAlerter({
    bat: 'BAT0'
  });
}).call(this);
